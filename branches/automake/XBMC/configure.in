#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

## Init autoconf and automake
AC_PREREQ([2.62])
AC_INIT([xbmc], [pre9.04], [http://xbmc.org])
AM_INIT_AUTOMAKE([foreign])
#AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADERS([config.h])
#AX_PREFIX_CONFIG_H([xbmc-config.h], [XBMC])
AC_CANONICAL_HOST

## Determine our platform
case $host in
    i*86*-linux-gnu*)
       ARCH="i486-linux"
       ;;
    x86_64-*-linux-gnu*)
       ARCH="x86_64-linux"
       ;;
    i386-apple-darwin*)
       ARCH="x86-osx"
       AC_SUBST(ARCH_DEFINES, "-mmacosx-version-min=10.4 -isysroot /Developer/SDKs/MacOSX10.4u.sdk")
       ;;
    powerpc-apple-darwin*)
       ARCH="powerpc-osx"
       AC_SUBST(ARCH_DEFINES, "-mmacosx-version-min=10.4 -isysroot /Developer/SDKs/MacOSX10.4u.sdk")
       ;;
    powerpc-*-linux-gnu*)
       ARCH="powerpc-linux"
       AC_SUBST(ARCH_DEFINES, "-D_POWERPC")
       ;;
    powerpc64-*-linux-gnu*)
       ARCH="powerpc64-linux"
       AC_SUBST(ARCH_DEFINES, "-D_POWERPC64")
       ;;
    *)
       AC_MSG_ERROR(unsupported host ($host))
esac
AM_CONDITIONAL([XBMC_PLAT_LINUX], test x$ARCH = xi486-linux || \
                                  test x$ARCH = xx86_64-linux || \
                                  test x$ARCH = xpowerpc-linux || \
                                  test x$ARCH = xpowerpc64-linux)
AM_CONDITIONAL([XBMC_PLAT_OSX],   test x$ARCH = xosx)

## Parse configure options
AC_ARG_ENABLE([optimizations],
            [AS_HELP_STRING([--enable-optimizations],
               [enable optimization (default is yes)])],
            [use_optimizations=$enableval],
            [use_optimizations=yes])

AC_ARG_ENABLE([gl],
            [AS_HELP_STRING([--disable-gl],
                            [disable OpenGL rendering])],
            [use_gl=$enableval],
            [use_gl=yes])

AC_ARG_ENABLE([joystick],
            [AS_HELP_STRING([--disable-joystick],
                            [disable SDL joystick support])],
            [use_joystick=$enableval],
            [use_joystick=yes])

AC_ARG_ENABLE([xrandr],
            [AS_HELP_STRING([--disable-xrandr],
                            [disable XRandR support])],
            [use_xrandr=$enableval],
            [use_xrandr=yes])

AC_ARG_ENABLE([ccache],
            [AS_HELP_STRING([--disable-ccache],
                            [disable build with ccache (default yes if available)])],
            [use_ccache=$enableval],
            [use_ccache=yes])

AC_ARG_ENABLE([pulse],
            [AS_HELP_STRING([--disable-pulse],
                            [disable PulseAudio support (default yes if available)])],
            [use_pulse=$enableval],
            [use_pulse=yes])

AC_ARG_ENABLE([faac],
            [AS_HELP_STRING([--disable-faac],
                            [disable FAAC support])],
            [use_faac=$enableval],
            [use_faac=yes])

AC_ARG_ENABLE([dvdcss],
            [AS_HELP_STRING([--disable-dvdcss],
                            [disable DVDCSS support])],
            [use_dvdcss=$enableval],
            [use_dvdcss=yes])

AC_ARG_ENABLE([mid],
            [AS_HELP_STRING([--enable-mid],
                            [enable MID support])],
            [use_mid=$enableval],
            [use_mid=no])

AC_ARG_ENABLE([optimizations],
            [AS_HELP_STRING([--disable-optimizations],
                            [disnable optimization])],
            [use_optimizations=$enableval],
            [use_optimizations=yes])

AC_ARG_ENABLE([debug],
            [AS_HELP_STRING([--disable-debug],
                            [disable debug symbols])],
            [use_debug=$enableval],
            [use_debug=yes])

AC_ARG_ENABLE([profiling],
            [AS_HELP_STRING([--enable-profiling],
                            [enable gprof profiling])],
            [use_profiling=$enableval],
            [use_profiling=no])

## Check for required progs
# save passed values
CFLAGS_SAVE=$CFLAGS
CXXFLAGS_SAVE=$CXXFLAGS
CPPFLAGS_SAVE=$CPPFLAGS
AC_PROG_CC
AC_PROG_CXX
AC_PROG_OBJC
#AS_IF([test x$host_vendor = xapple], [AC_PROG_OBJC])
AC_PROG_RANLIB
AC_PROG_AWK
AC_PROG_LN_S
AC_PROG_MAKE_SET
# restore passed vales
CFLAGS=$CFLAGS_SAVE
CXXFLAGS=$CXXFLAGS_SAVE
CPPFLAGS=$CPPFLAGS_SAVE

## Check for required libs
PKG_CHECK_MODULES([ALSA],         [alsa])
PKG_CHECK_MODULES([FONTCONFIG],   [fontconfig])
PKG_CHECK_MODULES([FREETYPE2],    [freetype2])
PKG_CHECK_MODULES([FRIBIDI],      [fribidi])
PKG_CHECK_MODULES([LIBPCRE],      [libpcre])
PKG_CHECK_MODULES([LIBPNG12],     [libpng12])
PKG_CHECK_MODULES([MAD],          [mad])
PKG_CHECK_MODULES([OGG],          [ogg])
PKG_CHECK_MODULES([SQLITE3],      [sqlite3])
PKG_CHECK_MODULES([VORBIS],       [vorbis])
AC_CHECK_LIB([bz2],         [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([mysqlclient], [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([rt],          [clock_gettime])  # check for rt, required for clock_gettime
AC_CHECK_LIB([png12],       [main],, AC_MSG_ERROR($missing_library)) # check for cximage
AC_CHECK_LIB([lzo2],        [main],,
  AC_CHECK_LIB([lzo],       [main],, AC_MSG_ERROR(ERROR: Could not find either liblzo or liblzo2 - one of these must be present))
  )

if test x$host_vendor = xapple
then
  AC_CHECK_LIB([z],         [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([iconv],     [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([smbclient], [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([portaudio], [main],, AC_MSG_ERROR($missing_library))
else
  PKG_CHECK_MODULES([DBUS_1],       [dbus-1])
  PKG_CHECK_MODULES([HAL],          [hal])
  PKG_CHECK_MODULES([HAL_STORAGE],  [hal-storage])
  PKG_CHECK_MODULES([ENCA],         [enca])
  PKG_CHECK_MODULES([LIBCURL],      [libcurl])
  PKG_CHECK_MODULES([SDL],          [sdl])
  PKG_CHECK_MODULES([XINERAMA],     [xinerama])
  PKG_CHECK_MODULES([XMU],          [xmu])
  PKG_CHECK_MODULES([XT],           [xt])
  AC_CHECK_LIB([SDL_image], [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([SDL_mixer], [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([dl],        [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([resolv],    [main],, AC_MSG_ERROR($missing_library))
fi

# rt
# dl
# jasper
# resolve
# SDL_image
# SDL_mixer
# GLEW
# GLU
# bz2
# jpeg
# lzo2/lzo
# mysqlclient
## -- OSX ONLY --
# z
# iconv
# smbclient
# portaudio
## -- 2D ONLY --
# SDL_gfx

## Global CPP flags
CPPFLAGS+="-D_LINUX -D_FILE_DEFINED -D_REENTRANT -D_LARGEFILE64_SOURCE" 
CPPFLAGS+=" -D_FILE_OFFSET_BITS=64 -DINSTALL_PATH=\\\"\$(datadir)/xbmc\\\""
CPPFLAGS+=" -DSVN_REV=\\\"$(svnversion)\\\""

## Export variables
#AC_SUBST([CPPFLAGS])
AC_SUBST([ARCH])
AC_CONFIG_FILES([Makefile]
                [guilib/Makefile]
                [guilib/common/Makefile]
                [guilib/tinyXML/Makefile]
                [xbmc/cores/Makefile]
                [xbmc/cores/AudioRenderers/Makefile]
                [xbmc/cores/DllLoader/Makefile]
                [xbmc/cores/DllLoader/exports/Makefile]
                [xbmc/cores/DllLoader/exports/util/Makefile]
                [xbmc/cores/ExternalPlayer/Makefile]
                [xbmc/cores/VideoRenderers/Makefile]
                [xbmc/cores/VideoRenderers/VideoShaders/Makefile]
                [xbmc/cores/dvdplayer/Makefile]
                [xbmc/cores/dvdplayer/DVDCodecs/Makefile]
                [xbmc/cores/dvdplayer/DVDCodecs/Audio/Makefile]
                [xbmc/cores/dvdplayer/DVDCodecs/Overlay/Makefile]
                [xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile]
                [xbmc/cores/dvdplayer/DVDDemuxers/Makefile]
                [xbmc/cores/dvdplayer/DVDInputStreams/Makefile]
                [xbmc/cores/dvdplayer/DVDSubtitles/Makefile]
                [xbmc/cores/paplayer/Makefile]
                [xbmc/DllPaths_generated.h]
                [xbmc/Makefile]
                [xbmc/FileSystem/Makefile]
                [xbmc/FileSystem/MusicDatabaseDirectory/Makefile]
                [xbmc/FileSystem/VideoDatabaseDirectory/Makefile]
                [xbmc/cdrip/Makefile]
                [xbmc/karaoke/Makefile]
                [xbmc/linux/Makefile]
                [xbmc/osx/Makefile]
                [xbmc/screensavers/Makefile]
                [xbmc/settings/Makefile]
                [xbmc/utils/Makefile]
                [xbmc/visualizations/Makefile]
                [xbmc/xbox/Makefile])
#if test x$host_vendor = xapple; then
#  AC_CONFIG_FILES([xbmc/osx/Makefile])
#fi

AC_OUTPUT

echo $prefix
echo $HAL_CFLAGS 
echo $HAL_LIBS
echo $DBUS_1_CFLAGS
echo $DBUS_1_LIBS
echo $CPPFLAGS

