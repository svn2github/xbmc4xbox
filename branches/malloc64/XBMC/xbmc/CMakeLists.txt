SET(SRCS APEv2Tag.cpp Album.cpp Application.cpp ApplicationMessenger.cpp ApplicationRenderer.cpp Artist.cpp AutoPtrHandle.cpp AutoSwitch.cpp Autorun.cpp BackgroundInfoLoader.cpp ButtonTranslator.cpp Crc32.cpp CueDocument.cpp DNSNameCache.cpp Database.cpp DateTime.cpp DetectDVDType.cpp DynamicDll.cpp Edl.cpp Favourites.cpp FileItem.cpp FlacTag.cpp GUIDialogAccessPoints.cpp GUIDialogAudioSubtitleSettings.cpp GUIDialogBoxBase.cpp GUIDialogBusy.cpp GUIDialogButtonMenu.cpp GUIDialogContentSettings.cpp GUIDialogContextMenu.cpp GUIDialogFavourites.cpp GUIDialogFileBrowser.cpp GUIDialogFileStacking.cpp GUIDialogFullScreenInfo.cpp GUIDialogGamepad.cpp GUIDialogKaiToast.cpp GUIDialogKeyboard.cpp GUIDialogLockSettings.cpp GUIDialogMediaSource.cpp GUIDialogMusicOSD.cpp GUIDialogMusicScan.cpp GUIDialogMuteBug.cpp GUIDialogNetworkSetup.cpp GUIDialogNumeric.cpp GUIDialogOK.cpp GUIDialogPictureInfo.cpp GUIDialogPlayerControls.cpp GUIDialogPluginSettings.cpp GUIDialogProfileSettings.cpp GUIDialogProgress.cpp GUIDialogSeekBar.cpp GUIDialogSelect.cpp GUIDialogSettings.cpp GUIDialogSmartPlaylistEditor.cpp GUIDialogSmartPlaylistRule.cpp GUIDialogSongInfo.cpp GUIDialogSubMenu.cpp GUIDialogVideoBookmarks.cpp GUIDialogVideoScan.cpp GUIDialogVideoSettings.cpp GUIDialogVisualisationPresetList.cpp GUIDialogVisualisationSettings.cpp GUIDialogVolumeBar.cpp GUIDialogYesNo.cpp GUILargeTextureManager.cpp GUIMediaWindow.cpp GUIPassword.cpp GUISettings.cpp GUIViewControl.cpp GUIViewState.cpp GUIViewStateMusic.cpp GUIViewStatePictures.cpp GUIViewStatePrograms.cpp GUIViewStateScripts.cpp GUIViewStateVideo.cpp GUIWindowFileManager.cpp GUIWindowFullScreen.cpp GUIWindowHome.cpp GUIWindowLoginScreen.cpp GUIWindowMusicBase.cpp GUIWindowMusicInfo.cpp GUIWindowMusicNav.cpp GUIWindowMusicOverlay.cpp GUIWindowMusicPlaylist.cpp GUIWindowMusicPlaylistEditor.cpp GUIWindowMusicSongs.cpp GUIWindowOSD.cpp GUIWindowPictures.cpp GUIWindowPointer.cpp GUIWindowPrograms.cpp GUIWindowScreensaver.cpp GUIWindowScripts.cpp GUIWindowScriptsInfo.cpp GUIWindowSettings.cpp GUIWindowSettingsCategory.cpp GUIWindowSettingsProfile.cpp GUIWindowSettingsScreenCalibration.cpp GUIWindowSlideShow.cpp GUIWindowStartup.cpp GUIWindowSystemInfo.cpp GUIWindowTestPattern.cpp GUIWindowVideoBase.cpp GUIWindowVideoFiles.cpp GUIWindowVideoInfo.cpp GUIWindowVideoNav.cpp GUIWindowVideoOverlay.cpp GUIWindowVideoPlaylist.cpp GUIWindowVisualisation.cpp GUIWindowWeather.cpp Id3Tag.cpp KeyboardLayoutConfiguration.cpp LangCodeExpander.cpp LangInfo.cpp LastFmManager.cpp MediaManager.cpp MediaSource.cpp MusicDatabase.cpp MusicInfoLoader.cpp MusicInfoScanner.cpp MusicInfoTagLoaderAAC.cpp MusicInfoTagLoaderASAP.cpp MusicInfoTagLoaderAdplug.cpp MusicInfoTagLoaderApe.cpp MusicInfoTagLoaderCDDA.cpp MusicInfoTagLoaderDatabase.cpp MusicInfoTagLoaderFlac.cpp MusicInfoTagLoaderGYM.cpp MusicInfoTagLoaderMP3.cpp MusicInfoTagLoaderMP4.cpp MusicInfoTagLoaderMPC.cpp MusicInfoTagLoaderMod.cpp MusicInfoTagLoaderNSF.cpp MusicInfoTagLoaderOgg.cpp MusicInfoTagLoaderSPC.cpp MusicInfoTagLoaderShn.cpp MusicInfoTagLoaderSid.cpp MusicInfoTagLoaderWMA.cpp MusicInfoTagLoaderWav.cpp MusicInfoTagLoaderWavPack.cpp MusicInfoTagLoaderYM.cpp NfoFile.cpp OggTag.cpp PartyModeManager.cpp Picture.cpp PictureInfoLoader.cpp PictureInfoTag.cpp PictureThumbLoader.cpp PlayList.cpp PlayListB4S.cpp PlayListFactory.cpp PlayListM3U.cpp PlayListPLS.cpp PlayListPlayer.cpp PlayListWPL.cpp PluginSettings.cpp Profile.cpp ProgramDatabase.cpp ScraperSettings.cpp SectionLoader.cpp Settings.cpp SettingsControls.cpp Shortcut.cpp SlideShowPicture.cpp SmartPlaylist.cpp Song.cpp SortFileItem.cpp StringUtils.cpp Temperature.cpp ThumbLoader.cpp ThumbnailCache.cpp UPnP.cpp URL.cpp Util.cpp VideoDatabase.cpp VideoInfoScanner.cpp VideoInfoTag.cpp ViewDatabase.cpp VorbisTag.cpp XBApplicationEx.cpp XBAudioConfig.cpp XBVideoConfig.cpp XboxMediaCenter.cpp musicInfoTag.cpp musicInfoTagLoaderFactory.cpp stdafx.cpp)

SET(DIRS cdrip cores lib)

##
# Do not edit unless you know what you are doing!
##

# Name the library after the directory.
GET_FILENAME_COMPONENT(BIN_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)

# FIXME: Are all of these necessary at the directory level?
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}/lib/libPython/Python" FileSystem cores utils lib/libUPnP/Platinum/ThirdParty/Neptune/Source/Core lib/libUPnP/Platinum/Source/Core lib/libUPnP/Platinum/Source/Devices/MediaServer lib/libUPnP/Platinum/ThirdParty/Neptune/Source/System/Posix lib/libUPnP/Platinum/Source/Devices/MediaConnect lib/libUPnP/Platinum/Source/Devices/MediaRenderer cores/dvdplayer cores/ffmpeg)

# Build each directory listed in DIRS.
FOREACH(dir ${DIRS})
  ADD_SUBDIRECTORY(${dir})
ENDFOREACH()

# Create a static library.
ADD_EXECUTABLE(${BIN_NAME} ${${BIN_NAME}_SRCS} ${SRCS})

