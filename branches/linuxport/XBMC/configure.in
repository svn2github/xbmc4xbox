#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT("xbmc", 9.04, bugs@xbmc.org)
AC_CONFIG_HEADERS([config.h])
AH_TOP([#pragma once])

# Ensure config.guess and config.sub exist and is executable
# Also install latest version of these files if available
AC_MSG_NOTICE([Ensuring config.guess and config.sub exist and is executable])
test -f config.guess && chmod a+x config.guess
if [[ -x /usr/share/misc/config.guess ]] && \
    [[ $($PWD/config.guess -t | sed 's/-//g') -lt \
    $(/usr/share/misc/config.guess -t | sed 's/-//g') ]]; then
    cp -f /usr/share/misc/config.guess config.guess
fi
test -f config.sub && chmod a+x config.sub
if [[ -x /usr/share/misc/config.sub ]] && \
    [[ $($PWD/config.sub -t | sed 's/-//g') -lt \
    $(/usr/share/misc/config.sub -t | sed 's/-//g') ]]; then
    cp -f /usr/share/misc/config.sub config.sub
fi

AC_CANONICAL_HOST

# General message strings
configure_debug="ERROR: this is a configure debug statement"
missing_library="Could not find a required library. Please see the README for your platform."
missing_headers="Could not find some required headers. Please see the README for your platform."
missing_program="Could not find a required program. Please see the README for your platform."
xrandr_not_found="== Could not find libXRandR. SDL will be used for resolution support. =="
xrandr_disabled="== XRandR support disabled. SDL will be used for resolution support. =="
pulse_not_found="== Could not find libpulse. PulseAudio support disabled. =="
pulse_disabled="== PulseAudio support manually disabled. =="
faac_not_found="== Could not find libfaac. FAAC support disabled. =="
faac_disabled="== FAAC support manually disabled. =="
dvdcss_enabled="== DVDCSS support enabled. =="
dvdcss_disabled="== DVDCSS support disabled. =="
avahi_not_found="== Could not find libavahi-common or libavahi-client. Avahi support disabled. =="
avahi_disabled="== Avahi support disabled. =="
vdpau_not_found="== Could not find libvdpau. VDPAU support disabled. =="
vdpau_disabled="== VDPAU support manually disabled. =="

# External library message strings
external_libraries_enabled="== Use of all supported external libraries enabled. =="
external_libraries_disabled="== Use of all supported external libraries disabled. =="
external_ffmpeg_enabled="== Use of external ffmpeg enabled. =="
external_ffmpeg_disabled="== Use of external ffmpeg disabled. =="
external_libmad_enabled="== Use of external libmad enabled. =="
external_libmad_disabled="== Use of external libmad disabled. =="
external_liba52_enabled="== Use of external liba52 enabled. =="
external_liba52_disabled="== Use of external liba52 disabled. =="
external_libdts_enabled="== Use of external libdts enabled. =="
external_libdts_disabled="== Use of external libdts disabled. =="
external_libfaad_enabled="== Use of external libfaad enabled. =="
external_libfaad_disabled="== Use of external libfaad disabled. =="
external_libmpeg2_enabled="== Use of external libmpeg2 enabled. =="
external_libmpeg2_disabled="== Use of external libmpeg2 disabled. =="
external_libass_enabled="== Use of external libass enabled. =="
external_libass_disabled="== Use of external libass disabled. =="
external_libvorbis_enabled="== Use of external libvorbis enabled. =="
external_libvorbis_disabled="== Use of external libvorbis disabled. =="
external_libogg_enabled="== Use of external libogg enabled. =="
external_libogg_disabled="== Use of external libogg disabled. =="
external_libmpcdec_enabled="== Use of external libmpcdec enabled. =="
external_libmpcdec_disabled="== Use of external libmpcdec disabled. =="
external_libflac_enabled="== Use of external libflac enabled. =="
external_libflac_disabled="== Use of external libflac disabled. =="
external_libwavpack_enabled="== Use of external libwavpack enabled. =="
external_libwavpack_disabled="== Use of external libwavpack disabled. =="
external_python_enabled="== Use of external python enabled. =="
external_python_disabled="== Use of external python disabled. =="
ffmpeg_vdpau_not_supported="== External ffmpeg doesn't support VDPAU. VDPAU support disabled. =="

case $host in
    i*86*-linux-gnu*)
       ARCH="i486-linux"
       ;;
    x86_64-*-linux-gnu*)
       ARCH="x86_64-linux"
       ;;
    i386-apple-darwin*)
       ARCH="x86-osx"
       AC_SUBST(ARCH_DEFINES, "-mmacosx-version-min=10.4 -isysroot /Developer/SDKs/MacOSX10.4u.sdk")
       ;;
    powerpc-apple-darwin*)
       ARCH="powerpc-osx"
       AC_SUBST(ARCH_DEFINES, "-mmacosx-version-min=10.4 -isysroot /Developer/SDKs/MacOSX10.4u.sdk")
       ;;
    powerpc-*-linux-gnu*)
       ARCH="powerpc-linux"
       AC_SUBST(ARCH_DEFINES, "-D_POWERPC")
       ;;
    powerpc64-*-linux-gnu*)
       ARCH="powerpc64-linux"
       AC_SUBST(ARCH_DEFINES, "-D_POWERPC64")
       ;;
    *)
       AC_MSG_ERROR(unsupported host ($host))
esac
AC_SUBST([ARCH])

AC_ARG_ENABLE([debug],
            [AS_HELP_STRING([--enable-debug],
               [enable debugging information (default is yes)])],
            [use_debug=$enableval],
            [use_debug=yes])

AC_ARG_ENABLE([optimizations],
            [AS_HELP_STRING([--enable-optimizations],
               [enable optimization (default is yes)])],
            [use_optimizations=$enableval],
            [use_optimizations=yes])

AC_ARG_ENABLE([gl],
            [AS_HELP_STRING([--enable-gl],
               [enable OpenGL rendering (default is yes)])],
            [use_gl=$enableval],
            [use_gl=yes])

AC_ARG_ENABLE([vdpau],
            [AS_HELP_STRING([--enable-vdpau],
               [enable VDPAU decoding (default is yes)])],
            [use_vdpau=$enableval],
            [use_vdpau=yes])

AC_ARG_ENABLE([profiling],
            [AS_HELP_STRING([--enable-profiling],
               [enable gprof profiling (default is no)])],
            [use_profiling=$enableval],
            [use_profiling=no])

AC_ARG_ENABLE([joystick],
            [AS_HELP_STRING([--enable-joystick],
               [enable SDL joystick support (default is yes)])],
            [use_joystick=$enableval],
            [use_joystick=yes])

AC_ARG_ENABLE([xrandr],
            [AS_HELP_STRING([--enable-xrandr],
               [enable XRandR support (default is yes)])],
            [use_xrandr=$enableval],
            [use_xrandr=yes])

AC_PATH_PROG(CCACHE,ccache,none)
AC_ARG_ENABLE([ccache],
            [AS_HELP_STRING([--enable-ccache],
               [enable building with ccache feature (default is yes if ccache is installed)])],
            [use_ccache=$enableval],
            [use_ccache=yes])

AC_ARG_ENABLE([pulse],
            [AS_HELP_STRING([--enable-pulse],
               [enable PulseAudio support (default is yes)])],
            [use_pulse=$enableval],
            [use_pulse=yes])

AC_ARG_ENABLE([faac],
            [AS_HELP_STRING([--enable-faac],
               [enable FAAC support (default is yes)])],
            [use_faac=$enableval],
            [use_faac=yes])

AC_ARG_ENABLE([dvdcss],
            [AS_HELP_STRING([--enable-dvdcss],
               [enable DVDCSS support (default is yes)])],
            [use_dvdcss=$enableval],
            [use_dvdcss=yes])

AC_ARG_ENABLE([mid],
            [AS_HELP_STRING([--enable-mid],
               [enable MID support (default is no)])],
            [use_mid=$enableval],
            [use_mid=no])
AC_ARG_ENABLE([avahi],
             [AS_HELP_STRING([--disable-avahi],
                [disable Avahi support (default is enabled if libavahi-common and libavahi-client is found)])],
             [use_avahi=$enableval],
             [use_avahi=yes])

### External libraries options
AC_ARG_ENABLE([external-libraries],
            [AS_HELP_STRING([--enable-external-libraries],
            [enable use of all supported external libraries (default is no) 'Linux only'])],
            [use_external_libraries=$enableval],
            [use_external_libraries=no])

AC_ARG_ENABLE([external-ffmpeg],
            [AS_HELP_STRING([--enable-external-ffmpeg],
            [enable use of external ffmpeg libraries (default is no) 'Linux only'])],
            [use_external_ffmpeg=$enableval],
            [use_external_ffmpeg=no])

AC_ARG_ENABLE([external-libmad],
            [AS_HELP_STRING([--enable-external-libmad],
            [enable use of external libmad library (default is no) 'Linux only'])],
            [use_external_libmad=$enableval],
            [use_external_libmad=no])

AC_ARG_ENABLE([external-liba52],
            [AS_HELP_STRING([--enable-external-liba52],
            [enable use of external liba52 library (default is no) 'Linux only'])],
            [use_external_liba52=$enableval],
            [use_external_liba52=no])

AC_ARG_ENABLE([external-libdts],
            [AS_HELP_STRING([--enable-external-libdts],
            [enable use of external libdts library (default is no) 'Linux only'])],
            [use_external_libdts=$enableval],
            [use_external_libdts=no])

AC_ARG_ENABLE([external-libfaad],
            [AS_HELP_STRING([--enable-external-libfaad],
            [enable use of external libfaad library (default is no) 'Linux only'])],
            [use_external_libfaad=$enableval],
            [use_external_libfaad=no])

AC_ARG_ENABLE([external-libmpeg2],
            [AS_HELP_STRING([--enable-external-libmpeg2],
            [enable use of external libmpeg2 library (default is no) 'Linux only'])],
            [use_external_libmpeg2=$enableval],
            [use_external_libmpeg2=no])

AC_ARG_ENABLE([external-libass],
            [AS_HELP_STRING([--enable-external-libass],
            [enable use of external libass library (default is no) 'Linux only'])],
            [use_external_libass=$enableval],
            [use_external_libass=no])

AC_ARG_ENABLE([external-libvorbis],
            [AS_HELP_STRING([--enable-external-libvorbis],
            [enable use of external libvorbis library (default is no) 'Linux only'])],
            [use_external_libvorbis=$enableval],
            [use_external_libvorbis=no])

AC_ARG_ENABLE([external-libogg],
            [AS_HELP_STRING([--enable-external-libogg],
            [enable use of external libogg library (default is no) 'Linux only'])],
            [use_external_libogg=$enableval],
            [use_external_libogg=no])

AC_ARG_ENABLE([external-libmpcdec],
            [AS_HELP_STRING([--enable-external-libmpcdec],
            [enable use of external libmpcdec library (default is no) 'Linux only'])],
            [use_external_libmpcdec=$enableval],
            [use_external_libmpcdec=no])

AC_ARG_ENABLE([external-libflac],
            [AS_HELP_STRING([--enable-external-libflac],
            [enable use of external libflac library (default is no) 'Linux only'])],
            [use_external_libflac=$enableval],
            [use_external_libflac=no])

AC_ARG_ENABLE([external-libwavpack],
            [AS_HELP_STRING([--enable-external-libwavpack],
            [enable use of external libwavpack library (default is no) 'Linux only'])],
            [use_external_libwavpack=$enableval],
            [use_external_libwavpack=no])

AC_ARG_ENABLE([external-python],
            [AS_HELP_STRING([--enable-external-python],
            [enable use of external python library (default is no) 'Linux only'])],
            [use_external_python=$enableval],
            [use_external_python=no])

### End of external library options

# PCRE is a requirement
use_pcre="yes"

# Checks for programs.
PASSED_CXXFLAGS=$CXXFLAGS # Hack to override autoconf default values
AC_PROG_CXX
CXXFLAGS=$PASSED_CXXFLAGS
PASSED_CFLAGS=$CFLAGS # Hack to override autoconf default values
AC_PROG_CC
CFLAGS=$PASSED_CFLAGS
AC_PROG_AWK
AC_PROG_LN_S
AC_PROG_MAKE_SET

# platform specific flags
if test "$host_vendor" = "apple" ; then
  AC_SUBST(MACOSX_DEPLOYMENT_TARGET, "10.4")
  # need these in CFLAGS/CXXFLAGS so AC_CHECK_LIB works
  CFLAGS="$CFLAGS -I/opt/local/include"
  CFLAGS="$CFLAGS -I/opt/local/include/freetype2"
  CFLAGS="$CFLAGS -I/opt/local/include/mysql5"
  CXXFLAGS="$CXXFLAGS -I/opt/local/include"
  CXXFLAGS="$CXXFLAGS -I/opt/local/include/freetype2"
  CXXFLAGS="$CXXFLAGS -I/opt/local/include/mysql5"
  # standard xbmc paths
  INCLUDES="$INCLUDES -I."
  INCLUDES="$INCLUDES -I\$(abs_top_srcdir)/xbmc"
  INCLUDES="$INCLUDES -I\$(abs_top_srcdir)/xbmc/lib"
  INCLUDES="$INCLUDES -I\$(abs_top_srcdir)/xbmc/osx"
  INCLUDES="$INCLUDES -I/opt/local/include"
  INCLUDES="$INCLUDES -I/opt/local/include/freetype2"
  INCLUDES="$INCLUDES -I/opt/local/include/mysql5"
  LDFLAGS="$LDFLAGS -mmacosx-version-min=10.4"
  LDFLAGS="$LDFLAGS -isysroot /Developer/SDKs/MacOSX10.4u.sdk"
  LDFLAGS="$LDFLAGS -framework IOKit"
  LDFLAGS="$LDFLAGS -framework Cocoa"
  LDFLAGS="$LDFLAGS -framework OpenGL"
  LDFLAGS="$LDFLAGS -framework AppKit"
  LDFLAGS="$LDFLAGS -framework Carbon"
  LDFLAGS="$LDFLAGS -framework CoreAudio"
  LDFLAGS="$LDFLAGS -framework QuickTime"
  LDFLAGS="$LDFLAGS -framework AudioUnit"
  LDFLAGS="$LDFLAGS -framework Foundation"
  LDFLAGS="$LDFLAGS -framework CoreServices"
  LDFLAGS="$LDFLAGS -framework CoreVideo"
  LDFLAGS="$LDFLAGS -framework CoreAudio"
  LDFLAGS="$LDFLAGS -framework AudioToolbox"
  LDFLAGS="$LDFLAGS -framework CoreFoundation"
  LDFLAGS="$LDFLAGS -framework DiskArbitration"
  LDFLAGS="$LDFLAGS -framework ApplicationServices"
  LDFLAGS="$LDFLAGS -L/opt/local/lib"
  LDFLAGS="$LDFLAGS -L/opt/local/lib/mysql5/mysql"
  LDFLAGS="$LDFLAGS -L/opt/local/lib/samba3"
fi

# Add top source directory for all builds so we can use config.h
INCLUDES="$INCLUDES -I\$(abs_top_srcdir)"

# Checks for boost headers using CXX instead of CC
AC_LANG_PUSH([C++])
AC_CHECK_HEADER([boost/shared_ptr.hpp],, AC_MSG_ERROR($missing_library))
AC_LANG_POP([C++])

# Checks for platforms libraries.
if test "$use_gl" = "yes"; then
  if test "$host_vendor" = "apple" ; then
    # linking to OpenGL.framework instead of libGL, libGLU
    AC_CHECK_LIB([GLEW],    [main],, AC_MSG_ERROR($missing_library))
  else
    AC_CHECK_LIB([GL],      [main],, AC_MSG_ERROR($missing_library))
    AC_CHECK_LIB([GLEW],    [main],, AC_MSG_ERROR($missing_library))
    AC_CHECK_LIB([GLU],     [main],, AC_MSG_ERROR($missing_library))
  fi
else
  AC_MSG_RESULT(== WARNING: OpenGL support is disabled. XBMC will run VERY slow. ==)
  AC_CHECK_LIB([SDL_gfx], [main])
fi


# platform independent libraries
AC_CHECK_HEADER([mad.h],,            AC_MSG_ERROR($missing_library))
AC_CHECK_HEADER([jpeglib.h],,        AC_MSG_ERROR($missing_library))
AC_CHECK_HEADER([samplerate.h],,     AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([mad],         [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([ogg],         [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([vorbis],      [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([vorbisenc],   [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([vorbisfile],  [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([freetype],    [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([fontconfig],  [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([bz2],         [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([fribidi],     [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([sqlite3],     [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([mysqlclient], [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([asound],      [main])           # check for asound, fedora
AC_CHECK_LIB([rt],          [clock_gettime])  # check for rt, required for clock_gettime
AC_CHECK_LIB([png12],       [main],, AC_MSG_ERROR($missing_library)) # check for cximage
AC_CHECK_LIB([jpeg],        [main],, AC_MSG_ERROR($missing_library)) # check for cximage
AC_CHECK_LIB([pcre],        [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([lzo2],        [main],,
  AC_CHECK_LIB([lzo],       [main],, AC_MSG_ERROR(ERROR: Could not find either liblzo or liblzo2 - one of these must be present))
  )
AC_CHECK_LIB([cdio],        [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([samplerate],  [main],, AC_MSG_ERROR($missing_library))
AC_CHECK_LIB([z],           [main],, AC_MSG_ERROR($missing_library))
# platform dependent libraries
if test "$host_vendor" = "apple" ; then
  AC_CHECK_LIB([iconv],     [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([smbclient], [main],, AC_MSG_ERROR($missing_library))
else
  AC_CHECK_LIB([SDL],       [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([SDL_image], [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([SDL_mixer], [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([dl],        [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([resolv],    [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([enca],      [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([jasper],    [main],, AC_MSG_ERROR($missing_library)) # check for cximage

  AC_CHECK_LIB([Xt],        [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([Xmu],       [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([Xinerama],  [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([curl],      [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([dbus-1],    [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([hal-storage], [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([hal],       [main],
    INCLUDES="$INCLUDES -DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include -I/usr/include/hal",
    AC_MSG_ERROR($missing_library))
fi

# PulseAudio
if test "$host_vendor" = "apple" ; then
  use_pulse="no"
  AC_MSG_RESULT($pulse_disabled)
else
  if test "$use_pulse" = "yes"; then
    AC_CHECK_LIB([pulse], [main], 
      LIBS=" -lpulse $LIBS";INCLUDES="$INCLUDES -DHAS_PULSEAUDIO",
      use_pulse=no;AC_MSG_RESULT($pulse_not_found))
  else
    AC_MSG_RESULT($pulse_disabled)
  fi
fi

# FAAC
if test "$host_vendor" = "apple" ; then
  use_faac="no"
  AC_MSG_RESULT($faac_disabled)
else
  if test "$use_faac" = "yes"; then
    AC_CHECK_LIB([faac], [main],,
      use_faac=no;AC_MSG_RESULT($faac_not_found))
  else
    AC_MSG_RESULT($faac_disabled)
  fi
fi

# avahi
if test "$host_vendor" = "apple" ; then
  use_avahi="no"
  AC_MSG_RESULT($avahi_disabled)
else
  if test "$use_avahi" = "yes"; then
    AC_CHECK_LIB([avahi-common], [main], 
      LIBS=" -lavahi-common $LIBS";,
      use_avahi=no;AC_MSG_RESULT($avahi_not_found))
	if test "$use_avahi" = "yes"; then
		#either both libs or none
    	AC_CHECK_LIB([avahi-client], [main], 
	      LIBS=" -lavahi-client $LIBS";INCLUDES="$INCLUDES -DHAS_AVAHI",
	      use_avahi=no;AC_MSG_RESULT($avahi_not_found))
	fi
    else
     AC_MSG_RESULT($avahi_disabled)
   fi
fi
 

# XRandR
if test "$host_vendor" = "apple" ; then
  use_xrandr="no"
  AC_MSG_RESULT($xrandr_disabled)
else
  if test "$use_xrandr" = "yes" ; then
    AC_CHECK_LIB([Xrandr], [main],, 
      use_xrandr="no";AC_MSG_RESULT($xrandr_not_found))
  else
    AC_MSG_RESULT($xrandr_disabled)
  fi
fi

### External libraries checks
if test "$use_external_libraries" = "yes"; then
  AC_MSG_NOTICE($external_libraries_enabled)
  USE_EXTERNAL_LIBRARIES=1
  AC_DEFINE([USE_EXTERNAL_LIBRARIES], [1], [Whether to use external libraries.])
else
  AC_MSG_NOTICE($external_libraries_disabled)
  USE_EXTERNAL_LIBRARIES=0
fi

# External FFmpeg
if test "$use_external_libraries" = "yes" || test "$use_external_ffmpeg" = "yes"; then
  AC_CHECK_LIB([avcodec],          [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([avformat],         [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([avutil],           [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([postproc],         [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([swscale],          [main],, AC_MSG_ERROR($missing_library))

  # Possible places the ffmpeg headers may be
  AC_CHECK_HEADERS([libavcodec/avcodec.h libavformat/avformat.h libavutil/avutil.h libpostproc/postprocess.h libswscale/swscale.h],,
  [AC_CHECK_HEADERS([ffmpeg/avcodec.h ffmpeg/avformat.h ffmpeg/avutil.h postproc/postprocess.h ffmpeg/swscale.h],,
  [AC_MSG_ERROR($missing_headers)])])

  # We'll support the use of rgb2rgb.h if it exists.
  AC_CHECK_HEADERS([libswscale/rgb2rgb.h],,)
  AC_CHECK_HEADERS([ffmpeg/rgb2rgb.h],,)

  AC_MSG_NOTICE($external_ffmpeg_enabled)
  USE_EXTERNAL_FFMPEG=1
  AC_DEFINE([USE_EXTERNAL_FFMPEG], [1], [Whether to use external FFmpeg libraries.])

  # Disable vdpau support if external libavcodec doesn't have it
  AC_CHECK_LIB([avcodec], [ff_vdpau_vc1_decode_picture],,
    use_vdpau=no;AC_MSG_RESULT($ffmpeg_vdpau_not_supported))
else
  AC_MSG_NOTICE($external_ffmpeg_disabled)
  USE_EXTERNAL_FFMPEG=0
fi

# External libmad
if test "$use_external_libraries" = "yes" || test "$use_external_libmad" = "yes"; then
  AC_CHECK_LIB([mad],          [main],, AC_MSG_ERROR($missing_library))

  AC_MSG_NOTICE($external_libmad_enabled)
  USE_EXTERNAL_LIBMAD=1
  AC_DEFINE([USE_EXTERNAL_LIBMAD], [1], [Whether to use external libmad library.])
else
  AC_MSG_NOTICE($external_libmad_disabled)
  USE_EXTERNAL_LIBMAD=0
fi

# External liba52
if test "$use_external_libraries" = "yes" || test "$use_external_liba52" = "yes"; then
  AC_CHECK_LIB([a52],          [main],, AC_MSG_ERROR($missing_library))

  AC_MSG_NOTICE($external_liba52_enabled)
  USE_EXTERNAL_LIBA52=1
  AC_DEFINE([USE_EXTERNAL_LIBA52], [1], [Whether to use external liba52 library.])
else
  AC_MSG_NOTICE($external_liba52_disabled)
  USE_EXTERNAL_LIBA52=0
fi

# External libdts
if test "$use_external_libraries" = "yes" || test "$use_external_libdts" = "yes"; then
  AC_CHECK_LIB([dts],          [main],, AC_MSG_ERROR($missing_library))

  AC_MSG_NOTICE($external_libdts_enabled)
  USE_EXTERNAL_LIBDTS=1
  AC_DEFINE([USE_EXTERNAL_LIBDTS], [1], [Whether to use external libdts library.])
else
  AC_MSG_NOTICE($external_libdts_disabled)
  USE_EXTERNAL_LIBDTS=0
fi

# External libfaad
if test "$use_external_libraries" = "yes" || test "$use_external_libfaad" = "yes"; then
  AC_CHECK_LIB([faad],          [main],, AC_MSG_ERROR($missing_library))
  # mp4ff is not included in Gentoo packages, which is why external libfaad
  # support has to be explicitely enabled
  AC_CHECK_LIB([mp4ff],          [main],, AC_MSG_ERROR($missing_library))

  # Test for the NeAACDecInitDRM function in libfaad as well
  AC_CHECK_LIB([faad],          [NeAACDecInitDRM],
    [AC_DEFINE([HAVE_LIBFAAD_NEAACDECINITDRM], [1], [Whether NeAACDecInitDRM function exists in libfaad library.])],)

  AC_LANG_PUSH(C++)
  AC_MSG_CHECKING([whether we have the Debian or Ubuntu < 2.7 FAAD ABI])
  AC_COMPILE_IFELSE(
    AC_LANG_PROGRAM([#include <neaacdec.h>], [char* x = NeAACDecGetErrorMessage(0)]),
    AC_MSG_RESULT(no),
    [
      AC_DEFINE([HAVE_LIBFAAD_DEBIAN_ABI], [1],
        [Whether we have the Debian or Ubuntu < 2.7 FAAD ABI])
      AC_MSG_RESULT(yes)
    ]
  )
  AC_LANG_POP()

  AC_MSG_NOTICE($external_libfaad_enabled)
  USE_EXTERNAL_LIBFAAD=1
  AC_DEFINE([USE_EXTERNAL_LIBFAAD], [1], [Whether to use external libfaad library.])
else
  AC_MSG_NOTICE($external_libfaad_disabled)
  USE_EXTERNAL_LIBFAAD=0
fi

# External libmpeg2
if test "$use_external_libraries" = "yes" || test "$use_external_libmpeg2" = "yes"; then
  AC_CHECK_LIB([mpeg2],          [main],, AC_MSG_ERROR($missing_library))
  AC_CHECK_LIB([mpeg2convert],          [main],, AC_MSG_ERROR($missing_library))

  AC_MSG_NOTICE($external_libmpeg2_enabled)
  USE_EXTERNAL_LIBMPEG2=1
  AC_DEFINE([USE_EXTERNAL_LIBMPEG2], [1], [Whether to use external libmpeg2 library.])
else
  AC_MSG_NOTICE($external_libmpeg2_disabled)
  USE_EXTERNAL_LIBMPEG2=0
fi

# External libass
if test "$use_external_libraries" = "yes" || test "$use_external_libass" = "yes"; then
  AC_CHECK_LIB([ass],          [main],, AC_MSG_ERROR($missing_library))

  AC_MSG_NOTICE($external_libass_enabled)
  USE_EXTERNAL_LIBASS=1
  AC_DEFINE([USE_EXTERNAL_LIBASS], [1], [Whether to use external libass library.])
else
  AC_MSG_NOTICE($external_libass_disabled)
  USE_EXTERNAL_LIBASS=0
fi

# External libvorbis
if test "$use_external_libraries" = "yes" || test "$use_external_libvorbis" = "yes"; then
  AC_MSG_NOTICE($external_libvorbis_enabled)
  USE_EXTERNAL_LIBVORBIS=1
  AC_DEFINE([USE_EXTERNAL_LIBVORBIS], [1], [Whether to use external libvorbis library.])
else
  AC_MSG_NOTICE($external_libvorbis_disabled)
  USE_EXTERNAL_LIBVORBIS=0
fi

# External libogg
if test "$use_external_libraries" = "yes" || test "$use_external_libogg" = "yes"; then
  AC_MSG_NOTICE($external_libogg_enabled)
  USE_EXTERNAL_LIBOGG=1
  AC_DEFINE([USE_EXTERNAL_LIBOGG], [1], [Whether to use external libogg library.])
else
  AC_MSG_NOTICE($external_libogg_disabled)
  USE_EXTERNAL_LIBOGG=0
fi

# External libmpcdec
if test "$use_external_libraries" = "yes" || test "$use_external_libmpcdec" = "yes"; then
  AC_CHECK_LIB([mpcdec],          [main],, AC_MSG_ERROR($missing_library))

  AC_MSG_NOTICE($external_libmpcdec_enabled)
  USE_EXTERNAL_LIBMPCDEC=1
  AC_DEFINE([USE_EXTERNAL_LIBMPCDEC], [1], [Whether to use external libmpcdec library.])
else
  AC_MSG_NOTICE($external_libmpcdec_disabled)
  USE_EXTERNAL_LIBMPCDEC=0
fi

# External libflac
if test "$use_external_libraries" = "yes" || test "$use_external_libflac" = "yes"; then
  AC_CHECK_LIB([FLAC],          [main],, AC_MSG_ERROR($missing_library))

  AC_MSG_NOTICE($external_libflac_enabled)
  USE_EXTERNAL_LIBFLAC=1
  AC_DEFINE([USE_EXTERNAL_LIBFLAC], [1], [Whether to use external libflac library.])
else
  AC_MSG_NOTICE($external_libflac_disabled)
  USE_EXTERNAL_LIBFLAC=0
fi

# External libwavpack
if test "$use_external_libraries" = "yes" || test "$use_external_libwavpack" = "yes"; then
  AC_CHECK_LIB([wavpack],          [main],, AC_MSG_ERROR($missing_library))

  AC_MSG_NOTICE($external_libwavpack_enabled)
  USE_EXTERNAL_LIBWAVPACK=1
  AC_DEFINE([USE_EXTERNAL_LIBWAVPACK], [1], [Whether to use external libwavpack library.])
else
  AC_MSG_NOTICE($external_libwavpack_disabled)
  USE_EXTERNAL_LIBWAVPACK=0
fi

# External Python
if test "$use_external_libraries" = "yes" || test "$use_external_python" = "yes" || \
  $(test "$host_cpu" = "powerpc" && test "$host_vendor" != "apple"); then
  AC_CHECK_LIB([python2.6], [main],,
  [AC_CHECK_LIB([python2.5], [main],,
  [AC_CHECK_LIB([python2.4], [main],,
  [AC_MSG_ERROR($missing_library)] )] )] )

  # Test again, but this time just set some variables we need in Makefiles
  AC_CHECK_LIB([python2.6], [main],[USE_PYTHON2_6=1],
  [AC_CHECK_LIB([python2.5], [main],[USE_PYTHON2_5=1],
  [AC_CHECK_LIB([python2.4], [main],[USE_PYTHON2_4=1],
  [AC_MSG_ERROR($missing_library)] )] )] )

  AC_MSG_NOTICE($external_python_enabled)
  test "$USE_PYTHON2_6" && AC_MSG_NOTICE([Using Python 2.6])
  test "$USE_PYTHON2_5" && AC_MSG_NOTICE([Using Python 2.5])
  test "$USE_PYTHON2_4" && AC_MSG_NOTICE([Using Python 2.4])
  USE_EXTERNAL_PYTHON=1
  AC_DEFINE([USE_EXTERNAL_PYTHON], [1], [Whether to use external python library.])
else
  AC_MSG_NOTICE($external_python_disabled)
  USE_EXTERNAL_PYTHON=0

  # We'll need zip in this case.
  AC_CHECK_PROG(HAVE_ZIP,zip,"yes","no",)
  if test "$HAVE_ZIP" = "no" ; then
    AC_MSG_ERROR($missing_program)
  fi
fi

# VDPAU
if test "$host_vendor" = "apple" ; then
  use_vdpau="no"
  AC_MSG_NOTICE($vdpau_disabled)
else
  if test "$use_vdpau" = "yes"; then
    AC_CHECK_HEADER([vdpau/vdpau.h],AC_DEFINE([HAVE_LIBVDPAU], [], [Define to 1 if you have the `vdpau' library (-lvdpau).]),
      use_vdpau=no;AC_MSG_RESULT($vdpau_not_found))
  else
    AC_MSG_NOTICE($vdpau_disabled)
  fi
fi

# platform specific bin utilities
if test "$host_vendor" != "apple" ; then
  AC_CHECK_PROG(HAVE_GAWK,gawk,"yes","no",)
  if test "$HAVE_GAWK" = "no" ; then
    AC_MSG_ERROR($missing_program)
  fi
fi

AC_CHECK_PROG(HAVE_CMAKE,cmake,"yes","no",)
if test "$HAVE_CMAKE" = "no" ; then
  AC_MSG_ERROR($missing_program)
fi

AC_CHECK_PROG(HAVE_GPERF,gperf,"yes","no",)
if test "$HAVE_GPERF" = "no" ; then
  AC_MSG_ERROR($missing_program)
fi

AC_CHECK_PROG(HAVE_UNZIP,unzip,"yes","no",)
if test "$HAVE_UNZIP" = "no" ; then
  AC_MSG_ERROR($missing_program)
fi

if test "$ARCH" != "x86_64-linux"; then
  AC_CHECK_PROG(HAVE_NASM,nasm,"yes","no",)
  if test "$HAVE_NASM" = "no" ; then
    AC_MSG_ERROR($missing_program)
  fi
fi

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([lzo/lzo1.h])
AC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h inttypes.h limits.h locale.h \
  malloc.h memory.h netdb.h netinet/in.h stddef.h stdint.h stdlib.h string.h \
  strings.h sys/file.h sys/ioctl.h sys/mount.h sys/param.h sys/socket.h \
  sys/time.h sys/timeb.h sys/vfs.h termios.h unistd.h utime.h wchar.h wctype.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STAT
AC_HEADER_STDBOOL
AC_C_CONST
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_INT8_T
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_C_RESTRICT
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_CHECK_MEMBERS([struct stat.st_rdev])
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_UINT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T

# Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_CHOWN
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FSEEKO
AC_PROG_GCC_TRADITIONAL
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
AC_FUNC_MEMCMP
AC_FUNC_MKTIME
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRCOLL
AC_FUNC_STRFTIME
AC_FUNC_STRTOD
AC_FUNC_UTIME_NULL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([atexit dup2 fdatasync floor fs_stat_dev ftime ftruncate getcwd gethostbyaddr gethostbyname gethostname getpagesize getpass gettimeofday inet_ntoa lchown localeconv memchr memmove memset mkdir modf munmap pow rmdir select setenv setlocale socket sqrt strcasecmp strchr strcspn strdup strerror strncasecmp strpbrk strrchr strspn strstr strtol strtoul sysinfo tzset utime])

# Check for various sizes
AC_CHECK_SIZEOF([int])
AC_CHECK_SIZEOF([size_t])

dashes="------------------------"
final_message="\n  XBMC Configuration:"
final_message="\n$dashes$final_message\n$dashes"

if test "$use_debug" = "yes"; then
  final_message="$final_message\n  Debugging:\tYes"
  if test "$use_profiling" = "yes"; then
    final_message="$final_message\n  Profiling:\tYes"
    DEBUG_FLAGS="-g -pg -D_DEBUG -Wall"
  else
    final_message="$final_message\n  Profiling:\tNo"
    DEBUG_FLAGS="-g -D_DEBUG -Wall"
  fi
else
  final_message="$final_message\n  Debugging:\tNo"
  if test "$use_profiling" = "yes"; then
    final_message="$final_message\n  Profiling:\tYes"
    DEBUG_FLAGS="-pg -DNDEBUG=1"
  else
    final_message="$final_message\n  Profiling:\tNo"
    DEBUG_FLAGS="-DNDEBUG=1"
  fi
fi

if test "$use_optimizations" = "yes"; then
  final_message="$final_message\n  Optimization:\tYes"
  CXXFLAGS="$CXXFLAGS -O2"
  CFLAGS="$CFLAGS -O2"
else
  final_message="$final_message\n  Optimization:\tNo"
fi

if test "$use_gl" = "yes"; then
  final_message="$final_message\n  OpenGL:\tYes"
  SDL_DEFINES=""
else
  final_message="$final_message\n  OpenGL:\tNo (Very Slow)"
  SDL_DEFINES="-DHAS_SDL_2D"
fi

if test "$use_vdpau" = "yes"; then
  final_message="$final_message\n  VDPAU:\tYes"
else
  final_message="$final_message\n  VDPAU:\tNo"
fi

if test "$use_joystick" = "yes"; then
  final_message="$final_message\n  Joystick:\tYes"
  SDL_DEFINES="$SDL_DEFINES -DHAS_SDL_JOYSTICK"
else
  final_message="$final_message\n  Joystick:\tNo"
fi

if test "$use_xrandr" = "yes"; then
  final_message="$final_message\n  XRandR:\tYes"
  SDL_DEFINES="$SDL_DEFINES -DHAS_XRANDR"
else
  final_message="$final_message\n  XRandR:\tNo"
fi

if test "$use_pcre" = "yes"; then
  final_message="$final_message\n  PCRE Support:\tYes"
  SDL_DEFINES="$SDL_DEFINES -DHAS_PCRE"
else
  final_message="$final_message\n  PCRE Support:\tNo"
fi

if test "$use_mid" = "yes"; then
  final_message="$final_message\n  MID Support:\tYes"
  SDL_DEFINES="$SDL_DEFINES -DMID"
else
  final_message="$final_message\n  MID Support:\tNo"
fi

if test -d "/usr/include/lzo"; then
  INCLUDES="$INCLUDES -I/usr/include/lzo"
else
  INCLUDES="$INCLUDES"
fi

if test "$use_ccache" = "yes"; then
  if test "$ac_cv_path_CCACHE" = "none"; then
     echo "ccache not found. Falling back to default CC"
     final_message="$final_message\n  ccache:\tNo"
  else
    CC="$ac_cv_path_CCACHE $CC"
    CXX="$ac_cv_path_CCACHE $CXX"
    AC_MSG_NOTICE(enabling ccache)
    final_message="$final_message\n  ccache:\tYes"
  fi
else
  final_message="$final_message\n  ccache:\tNo"
fi

if test "$use_pulse" = "yes"; then
  final_message="$final_message\n  PulseAudio:\tYes"
else
  final_message="$final_message\n  PulseAudio:\tNo"
fi

if test "$use_faac" = "yes"; then
  final_message="$final_message\n  FAAC:\t\tYes"
else
  final_message="$final_message\n  FAAC:\t\tNo"
fi

# DVDCSS
if test "$use_dvdcss" = "yes"; then
  AC_MSG_NOTICE($dvdcss_enabled)
  final_message="$final_message\n  DVDCSS:\tYes"
  BUILD_DVDCSS=1
  SKIP_CONFIG_DVDCSS=0
  DVDREAD_CFLAGS="-D_XBMC -DHAVE_DVDCSS_DVDCSS_H"
else
  AC_MSG_NOTICE($dvdcss_disabled)
  final_message="$final_message\n  DVDCSS:\tNo"
  BUILD_DVDCSS=0
  SKIP_CONFIG_DVDCSS=1
  DVDREAD_CFLAGS="-D_XBMC -UHAVE_DVDCSS_DVDCSS_H"
fi
if test "$use_avahi" = "yes"; then
  final_message="$final_message\n  Avahi:\tYes"
else
  final_message="$final_message\n  Avahi:\tNo"
fi

if test -n "$SVN_REV" -a "$SVN_REV" != "" ; then
  SDL_DEFINES="$SDL_DEFINES -D'SVN_REV=\"$SVN_REV\"'"
elif test "$host_vendor" = "apple"; then
  AC_CHECK_PROG(HAVE_SVNVERSION,svnversion,"yes","no",)
  if test "$HAVE_SVNVERSION" = "no" ; then
    AC_MSG_WARN([svnversion not found. No SVN_REV in builds!])
    echo "#define SVN_REV" > svn_revision.h
  else
	SVN_REVISION=$(svnversion -n .)
	echo "#define SVN_REV \"$SVN_REVISION\"" > svn_revision.h
  fi
elif test -x "/usr/bin/svnversion" ; then
  SDL_DEFINES="$SDL_DEFINES -D'SVN_REV=\"$(svnversion -n .)\"'"
fi

### External libraries messages
if test "$use_external_libraries" = "yes"; then
  final_message="$final_message\n  External Libraries:\tYes"
else
  final_message="$final_message\n  External Libraries:\tNo"
  if test "$use_external_ffmpeg" = "yes"; then
    final_message="$final_message\n  External FFmpeg:\tYes"
  else
    final_message="$final_message\n  External FFmpeg:\tNo"
  fi
  if test "$use_external_libmad" = "yes"; then
    final_message="$final_message\n  External libmad:\tYes"
  else
    final_message="$final_message\n  External libmad:\tNo"
  fi
  if test "$use_external_liba52" = "yes"; then
    final_message="$final_message\n  External liba52:\tYes"
  else
    final_message="$final_message\n  External liba52:\tNo"
  fi
  if test "$use_external_libdts" = "yes"; then
    final_message="$final_message\n  External libdts:\tYes"
  else
    final_message="$final_message\n  External libdts:\tNo"
  fi
  if test "$use_external_libfaad" = "yes"; then
    final_message="$final_message\n  External libfaad:\tYes"
  else
    final_message="$final_message\n  External libfaad:\tNo"
  fi
  if test "$use_external_libmpeg2" = "yes"; then
    final_message="$final_message\n  External libmpeg2:\tYes"
  else
    final_message="$final_message\n  External libmpeg2:\tNo"
  fi
  if test "$use_external_libass" = "yes"; then
    final_message="$final_message\n  External libass:\tYes"
  else
    final_message="$final_message\n  External libass:\tNo"
  fi
  if test "$use_external_libvorbis" = "yes"; then
    final_message="$final_message\n  External libvorbis:\tYes"
  else
    final_message="$final_message\n  External libvorbis:\tNo"
  fi
  if test "$use_external_libogg" = "yes"; then
    final_message="$final_message\n  External libogg:\tYes"
  else
    final_message="$final_message\n  External libogg:\tNo"
  fi
  if test "$use_external_libmpcdec" = "yes"; then
    final_message="$final_message\n  External libmpcdec:\tYes"
  else
    final_message="$final_message\n  External libmpcdec:\tNo"
  fi
  if test "$use_external_libflac" = "yes"; then
    final_message="$final_message\n  External libflac:\tYes"
  else
    final_message="$final_message\n  External libflac:\tNo"
  fi
  if test "$use_external_libwavpack" = "yes"; then
    final_message="$final_message\n  External libwavpack:\tYes"
  else
    final_message="$final_message\n  External libwavpack:\tNo"
  fi
  if test "$use_external_python" = "yes"; then
    final_message="$final_message\n  External Python:\tYes"
  else
    final_message="$final_message\n  External Python:\tNo"
  fi
fi

AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(INCLUDES)
AC_SUBST(LDFLAGS)
AC_SUBST(DEBUG_FLAGS)
AC_SUBST(SDL_DEFINES)
AC_SUBST(BUILD_DVDCSS)
AC_SUBST(USE_EXTERNAL_LIBRARIES)
AC_SUBST(USE_EXTERNAL_FFMPEG)
AC_SUBST(USE_EXTERNAL_LIBMAD)
AC_SUBST(USE_EXTERNAL_LIBA52)
AC_SUBST(USE_EXTERNAL_LIBDTS)
AC_SUBST(USE_EXTERNAL_LIBFAAD)
AC_SUBST(USE_EXTERNAL_LIBMPEG2)
AC_SUBST(USE_EXTERNAL_LIBASS)
AC_SUBST(USE_EXTERNAL_LIBVORBIS)
AC_SUBST(USE_EXTERNAL_LIBOGG)
AC_SUBST(USE_EXTERNAL_LIBMPCDEC)
AC_SUBST(USE_EXTERNAL_LIBFLAC)
AC_SUBST(USE_EXTERNAL_LIBWAVPACK)
AC_SUBST(USE_EXTERNAL_PYTHON)
AC_SUBST(USE_PYTHON2_6)
AC_SUBST(USE_PYTHON2_5)
AC_SUBST(USE_PYTHON2_4)
AC_CONFIG_FILES([Makefile Makefile.include]
                [xbmc/cores/dvdplayer/Codecs/Makefile]
                [xbmc/cores/dvdplayer/Codecs/libdvd/Makefile]
                [xbmc/cores/AudioRenderers/Makefile]
                [xbmc/cores/paplayer/Makefile]
                [xbmc/cores/paplayer/MACDll/Makefile]
                [xbmc/cores/paplayer/timidity/Makefile]
                [xbmc/cores/paplayer/AACCodec/Makefile]
                [xbmc/cores/paplayer/AC3Codec/Makefile]
                [xbmc/cores/paplayer/ADPCMCodec/Makefile]
                [xbmc/cores/paplayer/ModuleCodec/Makefile]
                [xbmc/cores/paplayer/GYMCodec/Makefile]
                [xbmc/cores/paplayer/MP3Codec/Makefile]
                [xbmc/cores/paplayer/MPCCodec/xbmc/Makefile]
                [xbmc/cores/paplayer/NSFCodec/Makefile]
                [xbmc/cores/paplayer/SIDCodec/Makefile]
                [xbmc/cores/paplayer/vgmstream/Makefile]
                [xbmc/cores/paplayer/SPCCodec/SNES/SNESAPU/Makefile]
                [xbmc/cores/paplayer/vorbisfile/Makefile]
                [xbmc/cores/paplayer/WavPackCodec/Makefile]
                [xbmc/cores/paplayer/YMCodec/StSoundLibrary/Makefile]
                [guilib/common/Makefile]
                [xbmc/lib/libass/xbmc/Makefile]
                [xbmc/lib/libXBMS/Makefile]
                [xbmc/lib/libRTV/Makefile]
                [xbmc/lib/libexif/Makefile]
                [xbmc/lib/libXDAAP/Makefile]
                [xbmc/lib/libhdhomerun/Makefile]
                [xbmc/lib/libGoAhead/Makefile]
                [xbmc/lib/libshout/Makefile]
                [xbmc/lib/libid3tag/Makefile]
                [xbmc/lib/cximage-6.0/Makefile]
                [xbmc/lib/libPython/linux/Makefile]
                [xbmc/lib/libUPnP/Makefile]
                [xbmc/DllPaths_generated.h]
                [xbmc/linux/Makefile]
                [xbmc/screensavers/Makefile]
                [xbmc/screensavers/rsxs-0.9/xbmc/Makefile]
                [xbmc/visualizations/XBMCProjectM/Makefile]
                [xbmc/visualizations/Goom/Makefile]
                [xbmc/visualizations/OpenGLSpectrum/Makefile]
                [xbmc/visualizations/WaveForm/Makefile]
                [xbmc/visualizations/iTunes/Makefile]
                [tools/Linux/xbmc.sh]
                [tools/XBMCTex/Makefile]
                [tools/EventClients/Clients/OSXRemote/Makefile]
)

# Function to run the configure scripts in our submodules
# Consists of three paramaters, the path to the submodule, the configure command
# with appropriate arguments, and a third parameter set to 1 if we are to skip
# running the script, anything else if not.
AC_DEFUN([XB_CONFIG_MODULE],[
AC_CONFIG_COMMANDS_POST([
if [[ $3 != "1" ]]; then
    if [[ -d $1 ]]; then
        pushd $1
        $2
        if [[ $? -ne 0 ]]; then
            popd
            AC_MSG_ERROR([[Submodule $1 failed to configure]])
        else
            popd
        fi
    else
        AC_MSG_ERROR([[Submodule $1 doesn't exist]])
    fi
else
    AC_MSG_NOTICE([[Skipping configuration of submodule $1.]])
fi
])
])

XB_CONFIG_MODULE([xbmc/lib/libPython/Python], [
  if test "$host_vendor" = "apple" ; then
    ./configure \
      --enable-ipv6 \
      --enable-unicode=ucs4 \
      --without-cxx \
      --enable-shared \
      --without-pymalloc \
      LDFLAGS="-L/opt/local/lib" \
      OPT="-Wno-deprecated-declarations -I/opt/local/include" \
      MACOSX_DEPLOYMENT_TARGET=10.4 &&
    sed -i bak -e "s/define HAVE_GETC_UNLOCKED 1/undef HAVE_GETC_UNLOCKED/" pyconfig.h && 
    sed -i bak -e "s/define HAVE_FSEEKO 1/undef HAVE_FSEEKO/" pyconfig.h &&
    sed -i bak -e "s/define HAVE_FTELLO 1/undef HAVE_FTELLO/" pyconfig.h &&
    sed -i bak -e "s/define HAVE_FTRUNCATE 1/undef HAVE_FTRUNCATE/" pyconfig.h &&
    sed -i bak -e "s/define HAVE_FPATHCONF 1/undef HAVE_FPATHCONF/" pyconfig.h &&
    sed -i bak -e "s/define HAVE_FSYNC 1/undef HAVE_FSYNC/" pyconfig.h &&
    sed -i bak -e "s/define HAVE_FCHDIR 1/undef HAVE_FCHDIR/" pyconfig.h &&
    cp pyconfig.h Include	
  else
    ./configure \
      --enable-ipv6 \
      --enable-unicode=ucs4 \
      --without-cxx \
      --enable-shared \
      --without-pymalloc \
      --prefix=`pwd`/../linux/python-lib CFLAGS=-fPIC &&
    sed -i -e "s/define HAVE_GETC_UNLOCKED 1/undef HAVE_GETC_UNLOCKED/" pyconfig.h &&
    cp pyconfig.h Include
  fi
], [$USE_EXTERNAL_PYTHON])

XB_CONFIG_MODULE([xbmc/cores/paplayer/MPCCodec], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \    
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4
  else
    ./configure
  fi
], [$USE_EXTERNAL_LIBMPCDEC])

XB_CONFIG_MODULE([xbmc/cores/paplayer/flac-1.2.1], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \    
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4 -C \
      --with-pic \
      --disable-asm-optimizations \
      --disable-xmms-plugin \
      --disable-cpplibs \
      CC="$CC" \
      CXX="$CXX" && \
    sed -ie s/__DECLARE__XBMC__ARCH__/$ARCH/ Makefile
  else
    ./configure -C \
      --with-pic \
      --disable-asm-optimizations \
      --disable-xmms-plugin \
      --disable-cpplibs \
      CC="$CC" \
      CXX="$CXX" && \
    sed -ie s/__DECLARE__XBMC__ARCH__/$ARCH/ Makefile
  fi
], [$USE_EXTERNAL_LIBFLAC])

XB_CONFIG_MODULE([xbmc/cores/paplayer/vorbisfile/libvorbis], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4 --with-pic
  else
    ./configure --with-pic
  fi
], [$USE_EXTERNAL_LIBVORBIS])

XB_CONFIG_MODULE([xbmc/cores/paplayer/vorbisfile/ogg], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4 --with-pic
  else
    ./configure --with-pic
  fi
], [$USE_EXTERNAL_LIBOGG])

XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/ffmpeg], [
  if test "$host_vendor" = "apple" ; then
    ./configure \
      --extra-cflags="-w -D_DARWIN_C_SOURCE -D_XBOX -isysroot /Developer/SDKs/MacOSX10.4u.sdk" \
      --disable-static \
      --disable-vhook \
      `if test "$use_debug" = "no"; then echo --disable-debug; fi` \
      --disable-muxers \
      --disable-encoders \
      --disable-devices \
      --disable-ffplay \
      --disable-ffserver \
      --disable-ffmpeg \
      --enable-shared \
      --disable-ipv6 \
      --disable-decoder=mpeg_xvmc \
      --enable-postproc \
      --enable-gpl \
      --enable-swscale \
      --enable-protocol=http \
      --enable-pthreads &&
    sed -i "" -e "s#YASM=yasm#YASM=/opt/local/bin/yasm#" config.mak &&
    sed -i "" -e "s# -D_ISOC99_SOURCE -D_POSIX_C_SOURCE=200112 # #" config.mak &&
    sed -i "" -e "s#libswscale_VERSION_MAJOR=0#libswscale_VERSION_MAJOR=0.7.1#" config.mak &&
    sed -i "" -e "s#libavfilter_VERSION_MAJOR=0#libavfilter_VERSION_MAJOR=0.4.0#" config.mak

  else
    ./configure \
      --extra-cflags="-D_XBOX" \
      --disable-static \
      --disable-altivec \
      --disable-vhook \
      --disable-ipv6 \
      `if test "$use_debug" = "no"; then echo --disable-debug; fi` \
      --disable-muxers \
      --disable-encoders \
      --disable-decoder=mpeg_xvmc \
      --disable-devices \
      --disable-ffplay \
      --disable-ffserver \
      --disable-ffmpeg \
      --enable-shared \
      --enable-postproc \
      --enable-gpl \
      --enable-swscale \
      `if test "$use_vdpau" = "yes"; then echo --enable-vdpau; fi` \
      `if test "$use_external_libfaad" = "yes"; then echo --enable-libfaad; fi` \
      --enable-protocol=http \
      --enable-pthreads
  fi
], [$USE_EXTERNAL_FFMPEG])

XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libdts], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    LDFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    ./configure \
      --disable-oss \
      --disable-solaris-audio \
      --disable-al-audio \
      --disable-win
  else
    ./configure \
      --disable-oss \
      --disable-solaris-audio \
      --disable-al-audio \
      --disable-win \
      CFLAGS="-fPIC"
  fi
], [$USE_EXTERNAL_LIBDTS])

XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libdvd/libdvdcss], [
  if test "$host_vendor" = "apple" ; then
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4 \
    CFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
      --disable-doc \
      --enable-static \
      --with-pic
  else
    ./configure \
      --disable-doc \
      --enable-static \
      --with-pic
  fi
], [$SKIP_CONFIG_DVDCSS])

XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libdvd/libdvdread], [
  if test "$host_vendor" = "apple" ; then
    ./configure2 MACOSX_DEPLOYMENT_TARGET=10.4 \
      --extra-cflags="$DVDREAD_CFLAGS -D__DARWIN__ -fPIC -DPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4 -I`pwd`/../libdvdcss/src" \
      --enable-static \
      --disable-shared &&
    make dvdread-config &&
    mkdir -p `pwd`/../includes/dvdread
    cp `pwd`/../libdvdread/src/*.h `pwd`/../includes/dvdread
  else
    ./configure2 \
      --extra-cflags="$DVDREAD_CFLAGS -fPIC -DPIC -I`pwd`/../libdvdcss/src" \
      --enable-static \
      --disable-shared &&
    make dvdread-config &&
    mkdir -p `pwd`/../includes/dvdread
    cp `pwd`/../libdvdread/src/*.h `pwd`/../includes/dvdread
  fi

], [0])

XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libdvd/libdvdnav], [
  if test "$host_vendor" = "apple" ; then
    ./configure2 MACOSX_DEPLOYMENT_TARGET=10.4 \
      --extra-cflags="$DVDREAD_CFLAGS -fPIC -DPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4 -I`pwd`/../includes" \
      --extra-ldflags="-L`pwd`/../libdvdread/obj" \
      --with-dvdread-config="`pwd`/../libdvdread/obj/dvdread-config" \
      --enable-static \
      --disable-shared
  else
    ./configure2 \
      --extra-cflags="$DVDREAD_CFLAGS -fPIC -DPIC -I`pwd`/../includes" \
      --extra-ldflags="-L`pwd`/../libdvdread/obj" \
      --with-dvdread-config="`pwd`/../libdvdread/obj/dvdread-config" \
      --enable-static \
      --disable-shared
  fi
], [0])

XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libfaad2], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-O3 -fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4 \
      --with-pic \
      --with-mp4v2
  else
    ./configure \
      --with-pic \
      --with-mp4v2 \
      CFLAGS="-O3"
  fi
], [$USE_EXTERNAL_LIBFAAD])

XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/liba52], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4 \
      --with-pic \
      --disable-static \
      --enable-shared \
      --disable-oss \
      --disable-solaris-audio \
      --disable-win \
      --disable-al-audio
  else
    ./configure \
      --with-pic \
      --disable-static \
      --enable-shared \
      --disable-oss \
      --disable-solaris-audio \
      --disable-win \
      --disable-al-audio \
      CFLAGS=-fPIC
  fi
], [$USE_EXTERNAL_LIBA52])

XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libmpeg2], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4 \
      --with-pic \
      --disable-static \
      --enable-shared \
      --disable-directx \
      --disable-sdl \
      --without-x
  else
    ./configure \
      --with-pic \
      --disable-static \
      --enable-shared \
      --disable-directx \
      --disable-sdl \
      --without-x
  fi
], [$USE_EXTERNAL_LIBMPEG2])

XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libmad], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4 \
      --with-pic 
  else
    ./configure \
      --with-pic
  fi
], [$USE_EXTERNAL_LIBMAD])

XB_CONFIG_MODULE([xbmc/lib/cximage-6.0/zlib], [
  if test "$host_vendor" = "apple" ; then
    export MACOSX_DEPLOYMENT_TARGET=10.4
    CFLAGS="-fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    ./configure
  fi
], [0])

XB_CONFIG_MODULE([xbmc/lib/libass], [
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-fPIC -fno-common -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4
  else
    CFLAGS=-fPIC \
    ./configure
  fi
], [$USE_EXTERNAL_LIBASS])

XB_CONFIG_MODULE([xbmc/lib/libid3tag/libid3tag],[
  if test "$host_vendor" = "apple" ; then
    CFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4 -fno-common" \
    CPPFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4 -fno-common" \
    ./configure MACOSX_DEPLOYMENT_TARGET=10.4 \
      --disable-static \
      --disable-debugging \
      --with-pic
  else
    CFLAGS=-O3 \
    ./configure \
      --disable-static \
      --disable-debugging \
      --with-pic
  fi
], [0])

XB_CONFIG_MODULE([xbmc/visualizations/XBMCProjectM/libprojectM],[
  if test "$host_vendor" = "apple" ; then
    rm -f CMakeCache.txt && CC="" CXX=""  cmake -D CMAKE_C_FLAGS:STRING="-fno-common" -D CMAKE_CXX_FLAGS:STRING="-fno-common" -D CMAKE_BUILD_TYPE:STRING=RelWithDebInfo -D USE_FTGL:BOOL=OFF .
  else
    rm -f CMakeCache.txt && CC="" CXX=""  cmake -D CMAKE_BUILD_TYPE:STRING=RelWithDebInfo -D USE_FTGL:BOOL=OFF .
  fi
], [0])

XB_CONFIG_MODULE([xbmc/visualizations/Goom/goom2k4-0],[
  if test "$host_vendor" = "apple" ; then
    ./configure \
      CFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
      CXXFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4"\
      --disable-shared \
      --enable-static \
      --with-pic

  else
    ./configure  \
      --disable-shared \
      --enable-static \
      --with-pic

  fi
], [0])

XB_CONFIG_MODULE([xbmc/screensavers/rsxs-0.9/], [
  if test "$host_vendor" = "apple" ; then
    ./configure \
      CFLAGS="-fPIC -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
      CXXFLAGS="-fPIC -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4" \
      LDFLAGS="-L/opt/local/lib" \
      LIBS="-lz" \
      --x-includes=/usr/X11/include --x-libraries=/usr/X11/lib \
      --without-xscreensaver \
      --disable-sound \
      --disable-cyclone \
      --disable-fieldlines \
      --disable-flocks \
      --disable-flux \
      --disable-helios \
      --disable-hyperspace \
      --disable-lattice \
      --disable-skyrocket
  else
    ./configure \
      CFLAGS="-fPIC" \ 
      CXXFLAGS="-fPIC" \
      --without-xscreensaver \
      --disable-sound \
      --disable-cyclone \
      --disable-fieldlines \
      --disable-flocks \
      --disable-flux \
      --disable-helios \
      --disable-hyperspace \
      --disable-lattice \
      --disable-skyrocket
  fi
], [0])

AC_OUTPUT

final_message="$final_message\n  prefix:\t$prefix\n$dashes"
echo -e "$final_message\n"
