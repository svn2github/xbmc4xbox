#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT("xbmc", 2.1, bugs@xboxmediacenter.com)
AC_CONFIG_HEADER([config.h])

AC_CANONICAL_HOST

AC_ARG_ENABLE([debug],
            [AS_HELP_STRING([--enable-debug],
               [enable debugging information (default is yes)])],
            [use_debug=$enableval],
            [use_debug=yes])

AC_ARG_ENABLE([gl],
            [AS_HELP_STRING([--enable-gl],
               [enable OpenGL rendering (default is yes)])],
            [use_gl=$enableval],
            [use_gl=yes])

AC_ARG_ENABLE([profiling],
            [AS_HELP_STRING([--enable-profiling],
               [enable gprof profiling (default is no)])],
            [use_profiling=$enableval],
            [use_profiling=no])

AC_ARG_ENABLE([joystick],
            [AS_HELP_STRING([--enable-joystick],
               [enable SDL joystick support (default is yes)])],
            [use_joystick=$enableval],
            [use_joystick=yes])

AC_ARG_ENABLE([xrandr],
            [AS_HELP_STRING([--enable-xrandr],
               [enable XRandR support (default is yes)])],
            [use_xrandr=$enableval],
            [use_xrandr=yes])

AC_ARG_ENABLE([pcre],
            [AS_HELP_STRING([--enable-pcre],
               [enable PCRE based regular expression support (default is yes)])],
            [use_pcre=$enableval],
            [use_pcre=yes])

AC_ARG_ENABLE([halmount],
            [AS_HELP_STRING([--enable-halmount],
               [enable automounting feature (default is no)])],
            [use_halmount=$enableval],
            [use_halmount=no])

AC_PATH_PROG(CCACHE,ccache,none)
AC_ARG_ENABLE([ccache],
            [AS_HELP_STRING([--enable-ccache],
               [enable building with ccache feature (default is yes if ccache is installed)])],
            [use_ccache=$enableval],
            [use_ccache=yes])

# Checks for programs.
AC_PROG_AWK
AC_PROG_CXX
AC_PROG_CC
AC_PROG_LN_S
AC_PROG_MAKE_SET

if test "$host_vendor" = "apple" ; then
   AC_SUBST(CFLAGS, "-L/System/Library/Frameworks/OpenGL.framework/Libraries -L/opt/local/lib -L/opt/local/lib/mysql5/mysql -I/opt/local/include")
   AC_SUBST(CXXFLAGS, "-L/System/Library/Frameworks/OpenGL.framework/Libraries -L/opt/local/lib -L/opt/local/lib/mysql5/mysql -I/opt/local/include")
   AC_SUBST(LDFLAGS, "-L/System/Library/Frameworks/OpenGL.framework/Libraries -L/opt/local/lib -L/opt/local/lib/mysql5/mysql")
   AC_SUBST(INCLUDES, "-I/opt/local/include -I/opt/local/include/freetype2 -I/opt/local/include/mysql5 -I\$(abs_top_srcdir)/xbmc -I\$(abs_top_srcdir)/xbmc/lib -I\$(abs_top_srcdir)/xbmc/osx -I\$(abs_top_srcdir)/xbmc/lib/libffmpeg-OSX/libavutil -I\$(abs_top_srcdir)/xbmc/lib/libffmpeg-OSX -I.")
fi

# Checks for boost headers using g++ instead of gcc
oldCC="$CC"
CC="$CXX"
AC_CHECK_HEADER([boost/shared_ptr.hpp], , AC_MSG_ERROR(== Could not find the boost library. Please see README.linux))
CC="$oldCC"

# Checks for libraries.
if test "$use_gl" = "yes"; then
  AC_CHECK_LIB([GL], [main],, AC_MSG_ERROR(libGL is required. Please see README.linux))
  AC_CHECK_LIB([GLEW], [main],, AC_MSG_ERROR(libGLEW is required. Please see README.linux))
  AC_CHECK_LIB([GLU], [main],, AC_MSG_ERROR(libGLU is required. Please see README.linux))
fi

if test "$host_vendor" != "apple"; then
   AC_CHECK_LIB([Xinerama], [main],, AC_MSG_ERROR(libXinerama is required. Please see README.linux))
fi
AC_CHECK_LIB([mad], [main],, AC_MSG_ERROR(libmad is required. Please see README.linux))
if test "$host_vendor" != "apple"; then
   AC_CHECK_LIB([tre], [main],, AC_MSG_ERROR(libtre is required. Please see README.linux))
fi
AC_CHECK_LIB([ogg], [main],, AC_MSG_ERROR(libogg is required. Please see README.linux))
AC_CHECK_LIB([vorbis], [main],, AC_MSG_ERROR(libvorbis is required. Please see README.linux)) 
AC_CHECK_LIB([SDL], [main])
if test "$use_gl" = "no"; then
  AC_MSG_RESULT(== WARNING: OpenGL support is disabled. XBMC will run VERY slow. ==)
  AC_CHECK_LIB([SDL_gfx], [main])
fi

AC_CHECK_LIB([SDL_image], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux))
AC_CHECK_LIB([SDL_mixer], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux))
AC_CHECK_LIB([dl], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux) )
AC_CHECK_LIB([freetype], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux))
AC_CHECK_LIB([fontconfig], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux))
AC_CHECK_LIB([bz2], [main],, AC_MSG_ERROR(== Could not find a required library (bz2). Please see README.linux))
AC_CHECK_LIB([fribidi], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux))
#AC_CHECK_LIB([lzo], [main],, AC_MSG_ERROR(== Could not find liblzo))
AC_CHECK_LIB([lzo2], [main],,
  AC_CHECK_LIB([lzo], [main],, AC_MSG_ERROR(== Could not find either liblzo or liblzo2 - one of these must be present))
  )
AC_CHECK_LIB([sqlite3], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux))
AC_CHECK_LIB([mysqlclient], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux))
AC_CHECK_LIB([asound], [main])      # check for asound library, fedora
AC_CHECK_LIB([rt], [clock_gettime])      # check for rt library, required for clock_gettime
AC_CHECK_LIB([resolv], [main])      # check for resolv library
AC_CHECK_LIB([png12], [main])      # check for cximage library
AC_CHECK_LIB([jasper], [main])      # check for cximage library
AC_CHECK_LIB([jpeg], [main])      # check for cximage library
if test "$host_vendor" != "apple" ; then
   if test "$use_xrandr" = "yes" ; then
      AC_CHECK_LIB([Xrandr], [main],, use_xrandr="no";AC_MSG_RESULT(== Could not find libXRandR. SDL will be used for resolution support. ==))
   else
      AC_MSG_RESULT(== XRandR support disabled. SDL will be used for resolution support. ==)
   fi
fi

if test "$use_pcre" = "yes"; then
  AC_CHECK_LIB([pcre], [main],, use_pcre="no";AC_MSG_RESULT(== Could not find libpcre. PCRE support disabled. ==))
else
  AC_MSG_RESULT(== PCRE support disabled. ==)
fi

if test "$host_vendor" != "apple" ; then
AC_CHECK_LIB([hal], [main],LZO_INCLUDES="$LZO_INCLUDES -DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include -I/usr/include/hal"
                          , AC_MSG_ERROR(== Could not find a required library. Please see README.linux) )
AC_CHECK_LIB([dbus-1], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux) )
AC_CHECK_LIB([hal-storage], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux) )
fi

if test "$host_cpu" = "powerpc" ; then
  AC_CHECK_LIB([python2.4], [main],, AC_MSG_ERROR(== Could not find a required library. Please see README.linux) )
fi

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h inttypes.h limits.h locale.h malloc.h memory.h netdb.h netinet/in.h stddef.h stdint.h stdlib.h string.h strings.h sys/file.h sys/ioctl.h sys/mount.h sys/param.h sys/socket.h sys/time.h sys/timeb.h sys/vfs.h termios.h unistd.h utime.h wchar.h wctype.h])
AC_CHECK_HEADERS([lzo/lzo1.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STAT
AC_HEADER_STDBOOL
AC_C_CONST
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_INT8_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_C_RESTRICT
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_CHECK_MEMBERS([struct stat.st_rdev])
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T

# Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_CHOWN
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FSEEKO
AC_PROG_GCC_TRADITIONAL
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
AC_FUNC_MEMCMP
AC_FUNC_MKTIME
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRCOLL
AC_FUNC_STRFTIME
AC_FUNC_STRTOD
AC_FUNC_UTIME_NULL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([atexit dup2 fdatasync floor fs_stat_dev ftime ftruncate getcwd gethostbyaddr gethostbyname gethostname getpagesize getpass gettimeofday inet_ntoa lchown localeconv memchr memmove memset mkdir modf munmap pow rmdir select setenv setlocale socket sqrt strcasecmp strchr strcspn strdup strerror strncasecmp strpbrk strrchr strspn strstr strtol strtoul sysinfo tzset utime])

dashes="------------------------"
final_message="\n  XBMC Configuration:"
final_message="\n$dashes$final_message\n$dashes"

if test "$use_debug" = "yes"; then
  final_message="$final_message\n  Debugging:\tYes"
  if test "$use_profiling" = "yes"; then
    final_message="$final_message\n  Profiling:\tYes"
    DEBUG_FLAGS="-g -pg -D_DEBUG -Wall"
  else
    final_message="$final_message\n  Profiling:\tNo"
    DEBUG_FLAGS="-g -D_DEBUG -Wall"
  fi
else
  final_message="$final_message\n  Debugging:\tNo"
  if test "$use_profiling" = "yes"; then
    final_message="$final_message\n  Profiling:\tYes"
    DEBUG_FLAGS="-pg -O2"
  else
    final_message="$final_message\n  Profiling:\tNo"
    DEBUG_FLAGS="-O2"
  fi
fi

if test "$use_gl" = "yes"; then
  final_message="$final_message\n  OpenGL:\tYes"
  SDL_DEFINES=""
else
  final_message="$final_message\n  OpenGL:\tNo (Very Slow)"
  SDL_DEFINES="-DHAS_SDL_2D"
fi

if test "$use_joystick" = "yes"; then
  final_message="$final_message\n  Joystick:\tYes"
  SDL_DEFINES="$SDL_DEFINES -DHAS_SDL_JOYSTICK"
else
  final_message="$final_message\n  Joystick:\tNo"
fi

if test "$use_xrandr" = "yes"; then
  final_message="$final_message\n  XRandR:\tYes"
  SDL_DEFINES="$SDL_DEFINES -DHAS_XRANDR"
else
  final_message="$final_message\n  XRandR:\tNo"
fi

if test "$use_pcre" = "yes"; then
  final_message="$final_message\n  PCRE Support:\tYes"
  SDL_DEFINES="$SDL_DEFINES -DHAS_PCRE"
else
  final_message="$final_message\n  PCRE Support:\tNo"
fi

if test -d "/usr/include/lzo"; then
  LZO_INCLUDES="$LZO_INCLUDES -I/usr/include/lzo"
else
  LZO_INCLUDES="$LZO_INCLUDES"
fi

case $host in
    i*86*-linux-gnu)
       ARCH="i486-linux"
       ;;
    x86_64-*-linux-gnu)
       ARCH="x86_64-linux"
       ;;
    i386-apple-darwin*)
       ARCH="x86-osx"
       ;;
    powerpc-*-linux-gnu)
       ARCH="powerpc-linux"
       AC_SUBST(ARCH_DEFINES, "-D_POWERPC")
       ;;
    powerpc64-*-linux-gnu)
       ARCH="powerpc64-linux"
       AC_SUBST(ARCH_DEFINES, "-D_POWERPC64")
       ;;
    *)
       AC_MSG_ERROR(==unsupported host)
esac
AC_SUBST([ARCH])

if test "$use_halmount" = "yes"; then
  final_message="$final_message\n  Automount:\tYes"
  SDL_DEFINES="$SDL_DEFINES -DHAL_HANDLEMOUNT"
else
  final_message="$final_message\n  Automount:\tNo"
fi

if test "$use_ccache" = "yes"; then
  if test "$ac_cv_path_CCACHE" = "none"; then
     echo "ccache not found. Falling back to default CC"
     final_message="$final_message\n  ccache:\tNo"
  else
    CC="$ac_cv_path_CCACHE $CC"
    CXX="$ac_cv_path_CCACHE $CXX"
    AC_MSG_NOTICE(enabling ccache)
    final_message="$final_message\n  ccache:\tYes"
  fi
else
  final_message="$final_message\n  ccache:\tNo"
fi

if test -x "/usr/bin/svnversion"; then
  SDL_DEFINES="$SDL_DEFINES -D'SVN_REV=\"$(svnversion -n .)\"'"
else
  if test -n $SVN_REV -a $SVN_REV != "" ; then 
    SDL_DEFINES="$SDL_DEFINES -D'SVN_REV=\"$SVN_REV\"'"
  fi
fi

AC_SUBST(DEBUG_FLAGS)
AC_SUBST(SDL_DEFINES)
AC_SUBST(LZO_INCLUDES)
AC_CONFIG_FILES([Makefile Makefile.include]
                [xbmc/lib/libPython/linux/Makefile]
                [xbmc/lib/libUPnP/Makefile]
                [tools/Linux/xbmc.sh]
                [tools/XBMCTex/Makefile]
                [xbmc/cores/dvdplayer/Codecs/Makefile]
                [xbmc/lib/cximage-6.0/Makefile.linux]
                [xbmc/cores/paplayer/MIDCodec/Makefile]
		[xbmc/cores/paplayer/AACCodec/Makefile]
                [xbmc/cores/paplayer/AC3Codec/Makefile]
                [xbmc/cores/paplayer/ADPCMCodec/Makefile]
                [xbmc/cores/paplayer/DCACodec/Makefile]
                [xbmc/cores/paplayer/GYMCodec/Makefile]
                [xbmc/cores/paplayer/MP3Codec/Makefile]
                [xbmc/cores/paplayer/MPCCodec/Makefile.xbmc_linux]
                [xbmc/cores/paplayer/NSFCodec/Makefile]
                [xbmc/cores/paplayer/SIDCodec/Makefile]
                [xbmc/cores/paplayer/WavPackCodec/Makefile]
                [xbmc/cores/paplayer/YMCodec/StSoundLibrary/Makefile]
                [xbmc/lib/libXBMS/Makefile]
                [xbmc/lib/libRTV/Makefile]
                [xbmc/lib/libexif/Makefile]
                [xbmc/lib/libXDAAP/Makefile]
                [xbmc/lib/libass/Makefile.xbmc_linux]
		[xbmc/lib/libhdhomerun/Makefile]
		[xbmc/lib/libGoAhead/Makefile]
		[xbmc/lib/libshout/Makefile]
		[xbmc/lib/libid3tag/Makefile]
		[xbmc/DllPaths_generated.h]
)

AC_DEFUN([XB_CONFIG_MODULE],[
AC_CONFIG_COMMANDS_POST([
if [[ -d $1 ]]; then
  pushd $1
  $2
  if [[ $? -ne 0 ]]; then 
    popd
    AC_MSG_ERROR([[Submodule $1 failed to configure]])
  else
    popd
  fi;
else
  AC_MSG_ERROR([[Submodule $1 doesn't exist]])
fi;
])
])

XB_CONFIG_MODULE([xbmc/lib/libPython/Python], [
  ./configure \
    --enable-ipv6 \
    --enable-unicode=ucs4 \
    --without-cxx \
    --enable-shared \
    --prefix=`pwd`/../linux/python-lib MACOSX_DEPLOYMENT_TARGET=10.5 &&
  sed -i -e "s/define HAVE_GETC_UNLOCKED 1/undef HAVE_GETC_UNLOCKED/" pyconfig.h &&
  cp pyconfig.h Include
])
XB_CONFIG_MODULE([xbmc/cores/paplayer/MPCCodec], [./configure])
XB_CONFIG_MODULE([xbmc/cores/paplayer/flac-1.2.1], [
  ./configure -C \
    --with-pic \
    --disable-asm-optimizations \
    CC="$CC" \
    CXX="$CXX"
])
XB_CONFIG_MODULE([xbmc/cores/paplayer/vorbisfile/libvorbis], [./configure])
XB_CONFIG_MODULE([xbmc/cores/paplayer/vorbisfile/ogg], [./configure])
XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/ffmpeg], [
  ./configure --extra-cflags="-D_XBOX" \
    --enable-shared \
    --enable-postproc \
    --enable-gpl \
    --disable-static \
    --disable-vhook \
    --enable-swscale \
    --enable-protocol=http \
    --disable-altivec \
    --disable-ipv6 \
    --enable-pthreads \
    --disable-debug \
    --disable-muxers \
    --disable-encoders \
    --disable-ffplay \
    --disable-ffserver
])
XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libdts], [
  ./configure \
    --disable-oss \
    --disable-solaris-adio \
    --disable-al-audio \
    --disable-win \
    CFLAGS="-fPIC"
])
XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libDVDCSS], [
  ./configure \
    --enable-static \
    --disable-shared \
    --with-pic
])
XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libdvdnav], [
  ./configure \
    --enable-static \
    --disable-shared \
    --with-pic \
    CFLAGS=-D_XBOX
])
XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libfaad2], [
  autoreconf -v -i -f && 
  ./configure \
    --with-pic \
    --with-mp4v2
])
XB_CONFIG_MODULE([xbmc/cores/dvdplayer/Codecs/libmad], [./configure --with-pic])
XB_CONFIG_MODULE([xbmc/lib/cximage-6.0/zlib], [CFLAGS=-fPIC ./configure])
XB_CONFIG_MODULE([xbmc/lib/libass], [CFLAGS=-fPIC ./configure])
XB_CONFIG_MODULE([xbmc/lib/libid3tag/libid3tag],[CFLAGS=-O3 ./configure])
XB_CONFIG_MODULE([xbmc/visualizations/XBMCProjectM],[cd libprojectM; CC="" CXX="" cmake -D CMAKE_BUILD_TYPE:STRING=RelWithDebInfo -D USE_FTGL:BOOL=OFF .;])
XB_CONFIG_MODULE([xbmc/screensavers/rsxs-0.9/], [CFLAGS=-fPIC CXXFLAGS=-fPIC ./configure --without-xscreensaver --disable-sound --disable-cyclone --disable-euphoria --disable-fieldlines --disable-flocks --disable-flux --disable-helios --disable-hyperspace --disable-lattice --disable-skyrocket])

AC_OUTPUT

final_message="$final_message\n  prefix:\t$prefix\n$dashes"
echo -e "$final_message\n"
